property pBottomBarId, pMaxHealth, pMaxHealthBarHeight, pOrigHealthBarLoc, pLastHealth, pLastBallcount, pMaxBallcount, pBallCountAnimTimer, pBallCreateAnimTimeron construct mepBallCountAnimTimer = 0pBallCreateAnimTimer = 0pBottomBarId = "RoomBarID"registerMessage(#roomReady, me.getID(), #replaceRoomBar)registerMessage(#updateInfostandAvatar, me.getID(), #updateRoomBarFigure)pMaxHealth = getIntVariable("snowwar.health.maximum")pMaxBallcount = getIntVariable("snowwar.snowball.maximum")pLastHealth = pMaxHealthreturn TRUEendon deconstruct meunregisterMessage(#roomReady, me.getID())unregisterMessage(#updateInfostandAvatar, me.getID())removeWindow(pBottomBarId)return TRUEendon Refresh me, tTopic, tdatacase tTopic of#gamestart: return me.updateBallCount(pLastBallcount)#gameend: return me.setCreateButtonState("_off")#update_game_visuals: return me.updateGameVisuals()#statusbar_health_update: return me.updateHealth(tdata)#statusbar_ballcount_update: return me.updateBallCount(tdata)#statusbar_createball_started: return me.animateBallCreateStarted()#statusbar_createball_stopped: return me.updateBallCount(pLastBallcount)#statusbar_disable_buttons: return me.setCreateButtonState("_off")end casereturn TRUEendon update meif pBallCountAnimTimer > 0 then me.animateBallCountFlashing()if pBallCreateAnimTimer > 0 then me.animateBallCreateStarted()endon updateGameVisuals meif not GetObject(#session).exists("user_game_index") then return FALSEtObjectID = GetObject(#session).GET("user_game_index")tHealth = me.getGameSystem().getGameObjectProperty(tObjectID, #hit_points)tBallCount = me.getGameSystem().getGameObjectProperty(tObjectID, #snowball_count)me.updateHealth(tHealth)me.updateBallCount(tBallCount)return TRUEendon updateHealth me, tValueif pMaxHealth = void() then return FALSEpLastHealth = tValuetWndObj = getWindow(pBottomBarId)if tWndObj = FALSE then return FALSEtElem = tWndObj.getElement("snowwar_bar_hit_points")if tElem = FALSE then return FALSEif pOrigHealthBarLoc = void() thenpOrigHealthBarLoc = point(tElem.getProperty(#locH), tElem.getProperty(#locV))end iftPercent = (tValue * 1.0) / pMaxHealthif tPercent > 0.7 then tmember = "ui_healthbar_green"else if tPercent > 0.3 then tmember = "ui_healthbar_yellow"else tmember = "ui_healthbar_red"if tElem.getProperty(#member) <> tmember thentElem.setProperty(#member, member(getmemnum(tmember)))end iftElemHeight = tElem.getProperty(#height)tElemLocV = tElem.getProperty(#locV)if tValue = pMaxHealth then pMaxHealthBarHeight = tElemHeighttHeightAdjust = integer(tPercent * pMaxHealthBarHeight - tElemHeight)tTotalAdjust = pMaxHealthBarHeight - (tElemHeight + tHeightAdjust)tElem.resizeBy(0, tHeightAdjust)tElem.moveTo(pOrigHealthBarLoc.locH, (pOrigHealthBarLoc.locV + tTotalAdjust))return TRUEendon updateBallCount me, tValueif pMaxBallcount = void() then return FALSEpLastBallcount = tValuetWndObj = getWindow(pBottomBarId)if tWndObj = FALSE then return FALSErepeat with tBallNum = 1 to pMaxBallcounttElem = tWndObj.getElement("snowball_" & tBallNum)if tElem <> FALSE thentElem.setProperty(#visible, tBallNum <= tValue)end ifend repeatcase tValue ofpMaxBallcount:return me.setCreateButtonState("_off")0:if pLastHealth = 0 then return TRUEreturn me.animateBallCountFlashing()otherwise:return me.setCreateButtonState(EMPTY)end caseendon animateBallCountFlashing meif pBallCountAnimTimer = 0 thenpBallCountAnimTimer = 1receiveUpdate(me.getID())else if pBallCountAnimTimer >= 50 thenremoveUpdate(me.getID())pBallCountAnimTimer = 0elsepBallCountAnimTimer = pBallCountAnimTimer + 1end iftWndObj = getWindow(pBottomBarId)if tWndObj = FALSE then return FALSEtMemNum = 1 + ((pBallCountAnimTimer / 4) mod 2)tMemName = ["ui_snowball_slots", "ui_snowball_slots_hilite"][tMemNum]tElem = tWndObj.getElement("int_alapalkki_balls_bg")if tElem = FALSE then return FALSEif tElem.getProperty(#member).name = tMemName then return TRUEtElem.setProperty(#member, member(getmemnum(tMemName)))tMemName = [EMPTY, "_hilite"][tMemNum]me.setCreateButtonState(tMemName)return TRUEendon animateBallCreateStarted meif pBallCreateAnimTimer = 0 thenpBallCreateAnimTimer = 1me.setCreateButtonState("_pressed")receiveUpdate(me.getID())else if pBallCreateAnimTimer >= 3 thenremoveUpdate(me.getID())me.setCreateButtonState("_off")pBallCreateAnimTimer = 0elsepBallCreateAnimTimer = pBallCreateAnimTimer + 1end ifendon setCreateButtonState me, tstatetWndObj = getWindow(pBottomBarId)if tWndObj = FALSE then return FALSEtElem = tWndObj.getElement("snowwar_button_create")if tElem = FALSE then return FALSEtMemName = "ui_makesnowballgreen" & tstateif tElem.getProperty(#member).name = tMemName then return TRUEtMemNum = getmemnum(tMemName)if tMemNum = FALSE then return FALSEtsprite = tElem.getProperty(#sprite)if tsprite <> FALSE thenif tstate = "_off" thentsprite.setcursor(0)elsetsprite.setcursor("cursor.finger")end ifend iftElem.setProperty(#member, member(tMemNum))return TRUEendon updateSoundIcon metWndObj = getWindow(pBottomBarId)if tWndObj = FALSE then return FALSEtElem = tWndObj.getElement("gs_int_sound_image")if tElem = FALSE then return FALSEif getSoundState() then tMemName = "sw_soundon"else tMemName = "sw_soundoff"tmember = member(getmemnum(tMemName))if tmember.type = #bitmap thentElem.feedImage(tmember.image)end ifreturn TRUEendon replaceRoomBar metSpectator = me.getGameSystem().getSpectatorModeFlag()if tSpectator then return TRUEremoveWindow(pBottomBarId)createWindow(pBottomBarId, "empty.window", 0, 471)tWndObj = getWindow(pBottomBarId)if tWndObj = FALSE then return FALSEtWndObj.lock(1)tWndObj.unmerge()tLayout = "sw_ui.window"if not tWndObj.merge(tLayout) then return FALSEme.updateRoomBarFigure()tWndObj.registerClient(me.getID())tWndObj.registerProcedure(#eventProcRoomBar, me.getID(), #mouseUp)tWndObj.registerProcedure(#eventProcRoomBar, me.getID(), #keyDown)tWndObj.registerProcedure(#eventProcRoomBar, me.getID(), #mouseEnter)tWndObj.registerProcedure(#eventProcRoomBar, me.getID(), #mouseLeave)me.updateSoundIcon()me.setCreateButtonState("_off")return TRUEendon updateRoomBarFigure metSpectator = me.getGameSystem().getSpectatorModeFlag()if not tSpectator and objectExists("Figure_Preview") thenGetObject("Figure_Preview").createHumanPartPreview(pBottomBarId, "snowwar_avatar_face", #head)end ifendon eventProcRoomBar me, tEvent, tSprID, tParamif tEvent = #mouseUp thencase tSprID of"snowwar_button_create":if not GetObject(#session).exists("user_game_index") then return FALSEreturn me.getGameSystem().executeGameObjectEvent(GetObject(#session).GET("user_game_index"), #send_create_snowball)"gs_int_sound_image":setSoundState(not getSoundState())return me.updateSoundIcon()end caseend iftRoomInt = GetObject("RoomBarProgram")if tRoomInt = FALSE then return FALSEreturn tRoomInt.eventProcRoomBar(tEvent, tSprID, tParam)end