property pRoomIndexon construct mereturn TRUEendon deconstruct meme.removeRoomObject()pRoomComponentObj = void()if not GetObject(#session).exists("user_index") thenreturn TRUEend ifif pRoomIndex = GetObject(#session).GET("user_index") thenif GetObject(#session).exists("user_index") thenGetObject(#session).Remove("user_index")end ifif GetObject(#session).exists("user_game_index") thenGetObject(#session).Remove("user_game_index")end ifend ifreturn TRUEendon define me, tdataif tdata[#room_index] < 0 thenreturn error(me, "Invalid room index for avatar:" && tdata, #define)end ifpRoomIndex = string(tdata[#room_index])if tdata[#name] = GetObject(#session).GET(#userName) thenGetObject(#session).set("user_index", pRoomIndex)GetObject(#session).set("user_game_index", tdata[#id])end ifreturn me.createRoomObject(tdata)endon gameObjectMoveDone me, tX, tY, tH, tDirHead, tDirBody, tActiontUserObject = me.getRoomObject()if tUserObject = FALSE then return FALSEreturn tUserObject.gameObjectMoveDone(tX, tY, tH, tDirHead, tDirBody, tAction)endon gameObjectAction me, tAction, tdatatUserObject = me.getRoomObject()if tUserObject = FALSE then return FALSEreturn tUserObject.gameObjectAction(tAction, tdata)endon gameObjectRefreshLocation me, tX, tY, tH, tDirHead, tDirBodytUserObject = me.getRoomObject()if tUserObject = 0 then return FALSEreturn tUserObject.resetValues(tX, tY, tH, tDirHead, tDirBody)endon gameObjectNewMoveTarget me, tX, tY, tH, tDirHead, tDirBody, tActiontUserObject = me.getRoomObject()if tUserObject = FALSE then return FALSEreturn tUserObject.gameObjectNewMoveTarget(tX, tY, tH, tDirHead, tDirBody, tAction)endon getPicture metUserObject = me.getRoomObject()if tUserObject = FALSE then return FALSEreturn tUserObject.getPicture()endon getRoomObject metRoomComponentObj = GetObject(#room_component)if tRoomComponentObj = FALSE thenreturn error(me, "Room component unavailable!", #getRoomObject)end ifreturn tRoomComponentObj.getUserObject(pRoomIndex)endon createRoomObject me, tdatatRoomComponentObj = GetObject(#room_component)if tRoomComponentObj = FALSE thenreturn error(me, "Room component unavailable!", #createRoomObject)end iftFigureSystemObj = GetObject("Figure_System")if tFigureSystemObj = FALSE thenreturn error(me, "Figure system unavailable!", #createRoomObject)end iftAvatarStruct = tdata.duplicate()tAvatarStruct[#id] = pRoomIndextAvatarStruct.setaProp(#direction, [tdata[#dirBody], tdata[#dirBody]])tClassID = "snowwar.object_avatar.roomobject.class"tPlayerClass = getVariable(tClassID)tClassContainer = tRoomComponentObj.getClassContainer()if tClassContainer = FALSE thenreturn error(me, "Avatar manager failed to initialize", #createRoomObject)end iftClassContainer.set(tClassID, tPlayerClass)tAvatarStruct.setaProp(#class, tClassID)tAvatarStruct.setaProp(#x, tdata[#next_tile_x])tAvatarStruct.setaProp(#y, tdata[#next_tile_y])if tdata[#next_tile_z] = void() thentAvatarStruct.setaProp(#h, 0.0)elsetAvatarStruct.setaProp(#h, tdata[#next_tile_z])end ifif tdata[#figure] = EMPTY thenreturn error(me, "Figure not found in human data, server probably didn't send it in GAMERESET (249)", #createRoomObject)end iftAvatarStruct.setaProp(#custom, tdata[#mission])tFigure = tFigureSystemObj.parseFigure(tdata[#figure], tdata[#sex], "user")tAvatarStruct.setaProp(#figure, tFigure)if not tRoomComponentObj.validateUserObjects(tAvatarStruct) then -- jump 21return error(me, "Room couldn't create avatar!", #createRoomObject)elsereturn TRUEend ifendon removeRoomObject metRoomComponentObj = GetObject(#room_component)if tRoomComponentObj = FALSE thenreturn error(me, "Room component unavailable!", #removeRoomObject)end ifif pRoomIndex = void() thenreturn FALSEend ifif not tRoomComponentObj.userObjectExists(pRoomIndex) thenreturn TRUEend ifreturn tRoomComponentObj.removeUserObject(pRoomIndex)end