property pTeamCount, pTeamScoreCache, pOwnScoreWindowId, pTeamScoreWindowId, pTimeWindowId, pTimeOutID, pBuffer, pTimerEndTime, pTimerDurationSec, pCountdownObjIdon construct mepTeamScoreCache = []pCountdownObjId = "game_countdown"pFinalScoresObjId = "game_finalscores"pOwnScoreWindowId = "game_win_own_score"pTeamScoreWindowId = "game_win_team_score"pTimeWindowId = "game_win_time"pTimeOutID = "game_score_updateGameTimeout"return TRUEendon deconstruct meme.removeGameScoreWindows()return TRUEendon Refresh me, tTopic, tdatacase tTopic of#set_number_of_teams:return me.setTeamNumber(tdata)#team_score_updated:return me.updateTeamScores(tdata)#personal_score_updated:return me.renderPersonalScores(tdata)#update_game_visuals:me.cacheTeamScores()me.renderPersonalScores(me.getOwnScore())return TRUE#gamestart:me.startGameTimer(tdata[#time_until_game_end], tdata[#time_until_game_end], tdata[#time_until_game_end])return me.showGameScoreWindows()#gameend:return me.removeGameScoreWindows()#fullgamestatus_time:if tdata[#state] <> #started then -- jump 11return TRUEend if -- jump 11 landingme.startGameTimer(tdata[#time_to_next_state], tdata[#state_duration], tdata[#time_until_game_end])return me.showGameScoreWindows()end casereturn TRUEendon setTeamNumber me, tTeamNumpTeamCount = tTeamNumpTeamScoreCache = []pTeamScoreCache[pTeamCount] = 0return TRUEendon getOwnScore meif not GetObject(#session).exists("user_game_index") then return FALSEtObjectID = GetObject(#session).GET("user_game_index")tScore = me.getGameSystem().getGameObjectProperty(tObjectID, #score)return tScoreendon startGameTimer me, tTimeUntilNextState, tStateDuration, tTimeUntilGameEndif tTimeUntilNextState <= 0 then return FALSEpTimerEndTime = the milliSeconds + tTimeUntilNextState * 1000pTimerDurationSec = tStateDurationif timeoutExists(pTimeOutID) then removeTimeout(pTimeOutID)createTimeout(pTimeOutID, 1000, #renderGameTimer, me.getID(), pTimerEndTime, tTimeUntilGameEnd)return me.renderGameTimer(pTimerEndTime)endon convertToMinSec me, tTimetMin = tTime / 60000tSec = (tTime mod 60000) / 1000if tSec < 10 then tSec = "0" & tSecreturn [tMin, tSec]endon renderGameTimer me, tEndTimetWndObj = getWindow(pTimeWindowId)if tWndObj = FALSE then return FALSEtElem = tWndObj.getElement("snowwar_sd_timeleft")if tElem = FALSE then return FALSEif tEndTime < the milliSeconds then return FALSEtTime = me.convertToMinSec((tEndTime - the milliSeconds))tTimeStr = tTime[1] & ":" & tTime[2]tElem.setText(tTimeStr)tElem = tWndObj.getElement("snowwar_timeleft")if tElem = FALSE then return FALSEtElem.setText(tTimeStr)return TRUEendon renderPersonalScores me, tdatatWndObj = getWindow(pOwnScoreWindowId)if tWndObj = FALSE then return FALSEif not integerp(tdata) then return FALSEtElem = tWndObj.getElement("snowwar_score_sd_self")if tElem = FALSE then return FALSEtElem.setText(tdata)tElem = tWndObj.getElement("snowwar_score_self")if tElem = FALSE then return FALSEtElem.setText(tdata)return TRUEendon cacheTeamScores meif pTeamCount < 1 thenreturn error(me, "Team count has not been set!", #cacheTeamScores)end ifpTeamScoreCache = []pTeamScoreCache[pTeamCount] = 0tGameSystem = me.getGameSystem()tIDList = tGameSystem.getGameObjectIdsOfType("avatar")repeat with tID in tIDListtObject = tGameSystem.getGameObject(tID)if tObject <> FALSE thentTeamId = (tObject.getGameObjectProperty("team_id") + 1)tScore = tObject.getGameObjectProperty("score")pTeamScoreCache[tTeamId] = (pTeamScoreCache[tTeamId] + tScore)end ifend repeatreturn me.renderTeamScores()endon updateTeamScores me, tdataif not listp(tdata) then return FALSErepeat with tTeam in tdatatTeamId = tTeam[#team_id] + 1if pTeamScoreCache.count < tTeamId thenpTeamScoreCache[tTeamId] = 0end ifpTeamScoreCache[tTeamId] = pTeamScoreCache[tTeamId] + tTeam[#score_add]end repeatreturn me.renderTeamScores()endon renderTeamScores metWndObj = getWindow(pTeamScoreWindowId)if tWndObj = FALSE then return FALSEif not listp(pTeamScoreCache) then return FALSErepeat with tTeamId = 1 to pTeamScoreCache.counttTeamScore = string(pTeamScoreCache[tTeamId])tElem = tWndObj.getElement("snowwar_score_sd_team" & tTeamId)if tElem <> FALSE then -- jump 44if tTeamScore <> tElem.getText() thentElem.setText(tTeamScore)tWndObj.getElement("snowwar_score_team" & tTeamId).setText(tTeamScore)end ifend ifend repeatreturn TRUEendon showGameScoreWindows meif not windowExists(pTeamScoreWindowId) thenif createWindow(pTeamScoreWindowId, "team_stats.window") thentWndObj = getWindow(pTeamScoreWindowId)tLocH = (the stage.rect.width - 54)if me.getGameSystem().getSpectatorModeFlag() then tWndObj.moveTo((tLocH - 30), 40)else tWndObj.moveTo(tLocH, 70)tWndObj.lock()repeat with tTeamId = 1 to 4me.setTeamScoreVisible(tTeamId, tTeamId <= pTeamCount and pTeamCount > 1)end repeatme.renderTeamScores()elsereturn error(me, "Cannot open team score window.", #showGameScoreWindows)end ifend ifif not windowExists(pOwnScoreWindowId) and not me.getGameSystem().getSpectatorModeFlag() thenif createWindow(pOwnScoreWindowId, "personal_stats.window") thentWndObj = getWindow(pOwnScoreWindowId)tLocH = the stage.rect.width - 54tWndObj.moveTo(tLocH, 10)tWndObj.lock()me.renderPersonalScores(me.getOwnScore())elsereturn error(me, "Cannot open personal score window.", #showGameScoreWindows)end ifend ifif not windowExists(pTimeWindowId) thenif createWindow(pTimeWindowId, "habbo_simple.window") thentWndObj = getWindow(pTimeWindowId)tWndObj.merge("sw_timeleft.window")if me.getGameSystem().getSpectatorModeFlag() thentWndObj.moveTo(26, 36)elsetWndObj.moveTo(10, 15)end iftWndObj.lock()elsereturn error(me, "Cannot open timeleft window.", #showGameScoreWindows)end ifend ifreturn TRUEendon setTeamScoreVisible me, tTeamId, tstatetWndObj = getWindow(pTeamScoreWindowId)if tWndObj = FALSE then return FALSEtElement = tWndObj.getElement("snowwar_scorebg_team" & tTeamId)if tElement <> FALSE then tElement.setProperty(#visible, tstate)tElement = tWndObj.getElement("snowwar_score_sd_team" & tTeamId)if tElement <> FALSE then tElement.setProperty(#visible, tstate)tElement = tWndObj.getElement("snowwar_score_team" & tTeamId)if tElement <> FALSE then tElement.setProperty(#visible, tstate)return TRUEendon removeGameScoreWindows meif windowExists(pTeamScoreWindowId) then removeWindow(pTeamScoreWindowId)if windowExists(pOwnScoreWindowId) then removeWindow(pOwnScoreWindowId)if windowExists(pTimeWindowId) then removeWindow(pTimeWindowId)if timeoutExists(pTimeOutID) then removeTimeout(pTimeOutID)return TRUEend